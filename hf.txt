= Haskell Forever =

[pass]
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
<textarea id='mod_base' hidden>
include::Base.hs[]
</textarea>
<textarea id='mod_map' hidden>
include::Map.hs[]
</textarea>
<textarea id='mod_system' hidden>
include::System.hs[]
</textarea>

<div id="rego" style="display:none;">
<p>
Capability: <input id="reg_text" type="text" value="demo"> <button id="reg_button" onclick="rego();">&lambda;</button>
</p>
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Enter "demo" to enter a demo.

Otherwise choose an unguessable string and keep it in a safe place.

[pass]
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
</div>

<div id="demoblurb" style="display:none;">
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Welcome!

  1. Click `Load`, and pick a program.

  2. Click `Run` to compile and run it. Standard input and output are hooked up to the text areas below.

You may save programs, but so can anyone else running this `demo`.
The name of any saved program must be delimited by curly braces, for example:
`{hello}`. Braces are automatically inserted if absent.

For exclusive access to your own programs, log out then come back with a
string only you know.

[pass]
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
</div>

<div id="app" style="display:none;">

<button onclick="load()">Load</button>

<button onclick="save_as()">Save As</button>
<input type="text" id="file" value="noname">
<span id='compiler' style='display:none;'><button onclick="go()"><b>Run!</b></button></span>
<span id="msg"></span>

<style>#presets {
position:absolute;
background-color:white;
border:1px solid grey;
padding:0.5em;
display:none;
}#presets div:hover{
background-color:grey;
}
</style>
<div id='presets'></div>

<p><span style='cursor:pointer;' onclick='hideshow("modules");'><span id='modules_toggle'>[+] Show</span> modules</span></p>
<div id='modules' style='display:none;'>
<style>#modlist li:hover{text-decoration:underline;}</style>
<ul id='modlist'></ul>
<p>
<textarea spellcheck='false' id='modinp' rows='16' style='box-sizing:border-box;width:100%;'></textarea>
<button onclick="update_module()">Update Module</button>
</p>
</div>

<label for="prog">Program:</label>
<br>
<textarea spellcheck='false' rows='12' id="prog" name="prog"
style='box-sizing:border-box;width:100%;'>
</textarea>
<br>
<label for="inp">Input:</label>
<br>
<textarea spellcheck='false' id='inp' rows='2' style='box-sizing:border-box;width:100%;'></textarea>
<br>
<label for="out">Output:</label>
<br>
<textarea spellcheck='false' readonly id='out' rows='16' style='box-sizing:border-box;width:100%;'></textarea>
<p><span style='cursor:pointer;' onclick='hideshow("secret");'><span id='secret_toggle'>[+] Show</span> capability</span></p>
<pre id='secret' style='display:none;'></pre>
<button onclick="logout()">Logout</button>
</div>

<script>
"use strict";
const presets = document.getElementById('presets');
let load_menu_toggle = 0;
const agentMod = WebAssembly.compileStreaming(fetch('agent.wasm'));
async function agent(canister_id, request_type, method, arg) {
  function teen(s) { return (new TextEncoder()).encode(s); }
  let out = [];
  const args = [teen(canister_id), teen(request_type), teen(method), arg];
  const x = await WebAssembly.instantiate(await agentMod, {env:
    { putchar: c      => out.push(c)
    , argc   : ()     => args.length
    , argvlen: n      => args[n].length
    , argvat : (n, k) => args[n][k]
    , now    : ()     => Date.now()/1000
    }});
  await x.exports.go();
  return await fetch(
    // "https://ic0.app/api/v2/canister/" + canister_id + "/" + request_type,
    "http://localhost:8000/api/v2/canister/" + canister_id + "/" + request_type,
    { method: "POST"
    , headers: { "Content-Type": "application/cbor" }
    , body: Uint8Array.from(out)
    }
  );
};

let cap = localStorage.getItem('cap');

function showApp() {
  document.getElementById("app").style.display = "block";
  document.getElementById("secret").innerText = cap;
  setupdemo();
}

function rego() {
  cap = document.getElementById('reg_text').value;
  localStorage.setItem('cap', cap);
  document.getElementById("rego").style.display = "none";
  showApp();
}

function logout() {
  localStorage.clear();
  document.getElementById("rego").style.display = "block";
  document.getElementById("app").style.display = "none";
  document.getElementById("demoblurb").style.display = "none";
}

const canid = "rrkah-fqaaa-aaaaa-aaaaq-cai";

let arg = [];
function leb(n) {
  if (n <= 127) arg.push(n);
  else {
    arg.push(n%128 + 128);
    leb(n>>7);
  }
}
function enc(s) {
  leb(s.length);
  for (let i=0; i<s.length; i++) arg.push(s.charCodeAt(i));
}

var blah;
var blahInp, blahInpLen, blahInpCur;
function setInput(s) { blahInp = s; blahInpLen = s.length; blahInpCur = 0; }
var blahOut;
const modmap = new Map();
modmap.set('Base', document.getElementById('mod_base').value);
modmap.set('Map', document.getElementById('mod_map').value);
modmap.set('System', document.getElementById('mod_system').value);
WebAssembly.instantiateStreaming(fetch('imp.wasm'), { env:
  { getchar: () => {
      if (blahInpCur == blahInpLen) throw "eof";
      blahInpCur++;
      return blahInp.charCodeAt(blahInpCur - 1);
    }
  , putchar: c => blahOut.push(c)
  , eof: () => blahInpCur == blahInpLen
  , get_module: () => {
      const mod = String.fromCharCode.apply(null, blahOut);
      blahOut = [];
      setInput("");
      if (modmap.has(mod)) setInput(modmap.get(mod));
    }
  }}).then(obj => {
    document.getElementById('compiler').style.display = "inline";
    blah = obj.instance;
  });

const msg = document.getElementById("msg");
const log_error = async function(r) { console.log(await r.text()); }
const prog = document.getElementById("prog");
const file = document.getElementById("file");
function save_as() {
  arg = [];
  enc(cap);
  if (cap == "demo") {
    if (file.value.charAt(0) != "{") {
      file.value = "{" + file.value;
    }
    if (file.value.charAt(file.value.length - 1) != "}") {
      file.value = file.value + "}";
    }
  }
  enc(file.value);
  enc(prog.value);
  console.log(arg);
  msg.innerText = "saving...";
  agent(canid, "call", "save", arg).then(response => {
    if (response.status == 202) msg.innerText = "";
    else {
      msg.innerText = "error: see log";
      log_error(response);
    }
  });
}

function buf2hex(buffer) {
  return [...new Uint8Array(buffer)]
    .map(x => x.toString(16).padStart(2, '0'))
    .join('');
}
async function cborReplyArg(response) {
  const cbor = await (await response.blob()).arrayBuffer();
  // Homes in on `CBOR.decode(cbor).reply.arg` by searching for encoded "arg":
  // 0x63 0x61 0x72 0x67
  const arr = new Uint8Array(cbor);
  let i = 0;
  while (arr[i] != 0x63
      || arr[i+1] != 0x61 || arr[i+2] != 0x72 || arr[i+3] != 0x67) {
    i++;
    if (i == arr.length) {
      console.log("Error: arg not found.");
      console.log(buf2hex(cbor));
      return "";
    }
  }
  i+=4;
  // Decodes a CBOR count.
  let count = arr[i] & 0x1f;
  i++;
  switch (count) {
    case 24: count = arr[i]; i+=1; break;
    case 25: count = 256*arr[i] + arr[i+1]; i+=2; break;
    case 26: count = 65536*arr[i] + 256*arr[i+1] + arr[i+2]; i+=3; break;
  }
  return arr.slice(i,i+count);
};
var parse_me;
var parse_i;
function unleb(n, b) {
  const k = parse_me[parse_i++];
  if (k <= 127) return n + k*b;
  else return unleb(n + (k - 128)*b, b*128);
}
function take(n) {
  const r = parse_me.slice(parse_i, parse_i + n);
  parse_i += n;
  return String.fromCharCode.apply(null, r);
}
function cat_file(s) {
  presets.style.display = "none";
  load_menu_toggle = 0;
  arg = [];
  enc(cap);
  enc(s);
  agent(canid, "query", "cat", arg).then(response => {
    if (response.status == 200) {
      cborReplyArg(response).then(out => {
        prog.value = String.fromCharCode.apply(null, out);
        file.value = s;
      });
    } else {
      response.text().then(t => { console.log(t); });
    }
  });
}
function load() {
  while (presets.firstChild) presets.removeChild(presets.firstChild);
  presets.style.display = "none";
  if (load_menu_toggle == 1) {
    load_menu_toggle = 0;
    return;
  }
  arg = [];
  enc(cap);
  agent(canid, "query", "ls", arg).then(response => {

    if (response.status == 200) {
      cborReplyArg(response).then(out => {
        parse_me = out;
        parse_i = 0;
        let n = unleb(0, 1);
        if (n == 0) {
          alert("no files");
          return;
        }
        load_menu_toggle = 1;
        presets.style.display = "block";
        while (n > 0) {
          const s = take(unleb(0, 1));
          const x = document.createElement('div');
          x.innerText = s;
          x.addEventListener("click", () => cat_file(s));
          presets.appendChild(x);
          n--;
        }
      });
    } else {
      response.text().then(t => { console.log(t); });
    }
  });
}

let lastProg = "";
const stdin = document.getElementById("inp");
const stdout = document.getElementById("out");

function compile() {
  msg.innerText = "compiling...";
  stdout.value = "";
  setInput(prog.value);
  if (lastProg == blahInp) return new Promise(function(resolve) { resolve() });
  lastProg = blahInp;
  blahOut = [];
  // Timeout so message is displayed. Unreliable.
  return new Promise(function(resolve, reject) {
    setTimeout(function() {
  blah.exports.go();
  if (blahOut[0] != 0) {
    msg.innerText = "compile error: " + String.fromCharCode.apply(null, blahOut);
    reject();
  } else {
    msg.innerText = "";
    resolve();
  }
    }, 0);
  });
}
function run() {
  msg.innerText = "running...";
  const inp = stdin.value;
  const inpLen = inp.length;
  let inpCur = 0;
  stdout.value = "";
  function pc(x) { stdout.value += String.fromCharCode(x); }
  function gc() {
    if (inpCur == inpLen) throw "eof";
    inpCur++;
    return inp.charCodeAt(inpCur - 1);
  }
  function eof() { return inpCur == inpLen; }
  WebAssembly.instantiate(new Uint8Array(blahOut),
      {env:{getchar:gc, putchar:pc, eof:eof}}).then(x => {
    x.instance.exports.go();
    msg.innerText = "";
  });
}
function go() { compile().then(x => { run(); }); }

function hideshow(s) {
  const x = document.getElementById(s);
  const xt = document.getElementById(s + "_toggle");
  if (x.style.display === "none") {
    x.style.display = "block";
    xt.innerText = "[-] Hide"
  } else {
    x.style.display = "none";
    xt.innerText = "[+] Show"
  }
}

const modlist = document.getElementById('modlist');
const modinp = document.getElementById('modinp');

function populate_modlist() {
  modlist.innerText = "";
  for (const key of modmap.keys()) {
    const x = document.createElement("li");
    const y = document.createTextNode(key);
    x.addEventListener('click', function(){ modinp.value = modmap.get(key); });
    x.appendChild(y);
    modlist.appendChild(x);
  }
}
populate_modlist();

function update_module() {
  setInput(modinp.value);
  blahOut = [];
  blah.exports.single_module();
  const mod = String.fromCharCode.apply(null, blahOut);
  if (mod == "") {
    console.log("module update failed");
  } else {
    modmap.set(mod, blahInp);
    populate_modlist();
  }
}

function setupdemo() {
  if (cap == "demo") {
    document.getElementById("demoblurb").style.display = "block";
    cat_file("helloworld");
  } else {
    document.getElementById("demoblurb").style.display = "none";
  }
}
if (cap == null) document.getElementById("rego").style.display = "block";
else showApp();

</script>
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
